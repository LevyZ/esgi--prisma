# import day, Query.day, Query.days, Mutation.updateDay, Mutation.createDay, Mutation.deleteDay, from "./generated/prisma.graphql"
# import user, Query.user, Query.users, Mutation.updateUser, Mutation.createUser, Mutation.deleteUser, from "./generated/prisma.graphql"
# import appointment, Query.appointment, Query.appointments, from "./generated/prisma.graphql"
# import department, Query.department, Query.departments, Mutation.updateDepartment, Mutation.createDepartment, Mutation.deleteDepartment, from "./generated/prisma.graphql"
# import establishment, Query.establishment, Query.establishments, Mutation.updateEstablishment, Mutation.createEstablishment, Mutation.deleteEstablishment,  from "./generated/prisma.graphql"
# import review, Query.review, Query.reviews, from "./generated/prisma.graphql"
# import service, Query.service, Query.services, from "./generated/prisma.graphql"
# import userEstablishment, Query.userEstablishment, Query.userEstablishments, from "./generated/prisma.graphql"
# import typeOfShift, Query.typeOfShift, Query.typeOfShifts, from "./generated/prisma.graphql"
# import hour, Query.hour, Query.hours, from "./generated/prisma.graphql"


type UserGestionnaire{
    id: Int!
    birthdate: DateTime
    department: Department
    email: String!
    establishment: [Establishment!]
    firstname: String
    gender: String
    lastname: String
    phoneNumber: String
}

type Query {
    me: User
    gestionnaireInfos: UserGestionnaire
}

type Mutation {
    signup(firstname: String!, lastname: String!, email: String!, phone: String, password: String!, roles: Json!, gender: String! ): AuthPayload!
    login(email: String!, password: String!): AuthPayload!
    createReview(establishment: EstablishmentWhereUniqueInput!, mark: Int, content: String): Review
    deleteReview(where: ReviewWhereUniqueInput!): Review
}

type AuthPayload {
    token: String!
    user: User!
}




